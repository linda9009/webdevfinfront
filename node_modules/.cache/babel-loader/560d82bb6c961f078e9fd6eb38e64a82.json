{"ast":null,"code":"var _jsxFileName = \"/Users/linda/web_dev/webdevfinfront/src/components/containers/AllCampusesContainer.js\";\nimport { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport { fetchAllCampusesThunk, deleteCampusThunk } from \"../../store/thunks\";\nimport { AllCampusesView } from \"../views\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AllCampusesContainer extends Component {\n  componentDidMount() {\n    this.props.fetchAllCampuses();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(AllCampusesView, {\n        allCampuses: this.props.allCampuses,\n        deleteCampus: this.props.deleteCampus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this);\n  }\n\n} // Map state to props;\n\n\nconst mapState = state => {\n  return {\n    allCampuses: state.allCampuses\n  };\n}; // Map dispatch to props;\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n    deleteCampus: campusId => dispatch(deleteCampusThunk(campusId))\n  };\n}; // // Type check props;\n// AllCampusesContainer.propTypes = {\n//   allCampuses: PropTypes.array.isRequired,\n//   fetchAllCampuses: PropTypes.func.isRequired,\n// };\n// Export our store-connected container by default;\n\n\nexport default withRouter(mapState, mapDispatch)(AllCampusesContainer);","map":{"version":3,"sources":["/Users/linda/web_dev/webdevfinfront/src/components/containers/AllCampusesContainer.js"],"names":["Component","connect","withRouter","fetchAllCampusesThunk","deleteCampusThunk","AllCampusesView","AllCampusesContainer","componentDidMount","props","fetchAllCampuses","render","allCampuses","deleteCampus","mapState","state","mapDispatch","dispatch","campusId"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,qBAAT,EAAgCC,iBAAhC,QAAyD,oBAAzD;AACA,SAASC,eAAT,QAAgC,UAAhC;;;AAEA,MAAMC,oBAAN,SAAmCN,SAAnC,CAA6C;AAC3CO,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWC,gBAAX;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BACA,QAAC,eAAD;AACE,QAAA,WAAW,EAAE,KAAKF,KAAL,CAAWG,WAD1B;AAEE,QAAA,YAAY,EAAE,KAAKH,KAAL,CAAWI;AAF3B;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AAd0C,C,CAiB7C;;;AACA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,SAAO;AACLH,IAAAA,WAAW,EAAEG,KAAK,CAACH;AADd,GAAP;AAGD,CAJD,C,CAMA;;;AACA,MAAMI,WAAW,GAAIC,QAAD,IAAc;AAChC,SAAO;AACLP,IAAAA,gBAAgB,EAAE,MAAMO,QAAQ,CAACb,qBAAqB,EAAtB,CAD3B;AAELS,IAAAA,YAAY,EAAGK,QAAD,IAAcD,QAAQ,CAACZ,iBAAiB,CAACa,QAAD,CAAlB;AAF/B,GAAP;AAID,CALD,C,CAOA;AACA;AACA;AACA;AACA;AAEA;;;AACA,eAAef,UAAU,CAACW,QAAD,EAAWE,WAAX,CAAV,CAAkCT,oBAAlC,CAAf","sourcesContent":["import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport { fetchAllCampusesThunk, deleteCampusThunk } from \"../../store/thunks\";\nimport { AllCampusesView } from \"../views\";\n\nclass AllCampusesContainer extends Component {\n  componentDidMount() {\n    this.props.fetchAllCampuses();\n  }\n\n  render() {\n    return (\n      <div>\n      <AllCampusesView\n        allCampuses={this.props.allCampuses}\n        deleteCampus={this.props.deleteCampus}\n      />\n      </div>\n    );\n  }\n}\n\n// Map state to props;\nconst mapState = (state) => {\n  return {\n    allCampuses: state.allCampuses,\n  };\n};\n\n// Map dispatch to props;\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n    deleteCampus: (campusId) => dispatch(deleteCampusThunk(campusId)),\n  };\n};\n\n// // Type check props;\n// AllCampusesContainer.propTypes = {\n//   allCampuses: PropTypes.array.isRequired,\n//   fetchAllCampuses: PropTypes.func.isRequired,\n// };\n\n// Export our store-connected container by default;\nexport default withRouter(mapState, mapDispatch)(AllCampusesContainer);"]},"metadata":{},"sourceType":"module"}